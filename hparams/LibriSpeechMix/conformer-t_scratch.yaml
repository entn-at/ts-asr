# ############################################################################
# Model: Conformer transducer with speaker encoder trained from scratch
# Authors: Luca Della Libera 2023
# ############################################################################

# Adapted from:
# https://github.com/speechbrain/speechbrain/blob/v0.5.15/recipes/LibriSpeech/ASR/transducer/hparams/conformer_transducer.yaml

experiment_name: LibriSpeechMix/Conformer-T_Scratch

# Seed needs to be set at top of YAML
seed: 0
__set_seed: !apply:torch.manual_seed [!ref <seed>]

# Data preparation
data_folder: !PLACEHOLDER
splits: [train-2mix, dev-clean-2mix, test-clean-2mix]
test_splits: [test-clean-2mix]
train_json: !ref <save_folder>/train.json
valid_json: !ref <save_folder>/dev.json
test_json: !ref <save_folder>/test.json
num_targets: null
num_enrolls: 1  # Must be <= 2, as in the public dev/test set
trim_nontarget: null
suppress_delay: null  # Set delay to 0 to maximize overlap
overlap_ratio: null

# Output directories
output_folder: !ref results/<experiment_name>/<seed>
save_folder: !ref <output_folder>/save

# Preprocessing parameters
train_remove_if_longer: 60.0  # Seconds
valid_remove_if_longer: 60.0  # Seconds
test_remove_if_longer: 60.0  # Seconds
trim_enroll: 20.0  # Must be >= 0.325, the minimum allowed by WavLM
gain_nontarget: 0  # With respect to the power of the target signal (< 0 => larger target speaker SIR)
sample_rate: 16000
sorting: ascending

# Features
n_fft: 512
n_mels: 80
win_length: 32
augment: False

# Training parameters
num_epochs: 100
grad_accumulation_factor: 4
dynamic_batching: True
train_batch_size: 3
valid_batch_size: 6
test_batch_size: 5
train_max_batch_length: 50.0  # Seconds
valid_max_batch_length: 50.0  # Seconds
test_max_batch_length: 50.0  # Seconds
num_buckets: 80
max_batch_size: 128
dataloader_workers: 8

vocab_size: 29  # If token_type=char, must be set equal to the number of found characters
token_type: char  # ["unigram", "bpe", "char"]
character_coverage: 1.0
blank_index: 0  # Index(blank/bos/eos/pad/unk) = 0

lr: 0.001
weight_decay: 0.01
warmup_steps: 10000

nonfinite_patience: 10
max_grad_norm: 5.0
auto_mix_prec: False
ckpt_interval_minutes: 600
keep_checkpoints: 10

# Model parameters
dropout: 0.1
d_model: 256
nhead: 4
encoder_num_layers: 12
d_ffn: 2048
kernel_size: 31
causal: False
padding: same  # Set to causal if `causal` is True
injection_mode: cat
injection_after: 0

#embedding_dim: 128
decoder_neurons: 512
decoder_num_layers: 1

joint_dim: 640

# Decoding parameters
valid_search_freq: 1
beam_size: 20
# state_beam and expand_beam set according to https://arxiv.org/abs/1904.02619
state_beam: 2.3
expand_beam: 2.3

# Pretrained model (e.g. on LibriSpeech)
model_path: null

# Modules
feature_extractor: !new:speechbrain.lobes.features.Fbank
    sample_rate: !ref <sample_rate>
    n_fft: !ref <n_fft>
    n_mels: !ref <n_mels>
    win_length: !ref <win_length>

normalizer: !new:speechbrain.processing.features.InputNormalization
    norm_type: sentence
    update_until_epoch: 4

augmentation: !new:speechbrain.lobes.augment.SpecAugment
    time_warp: True
    time_warp_window: 5
    time_warp_mode: bicubic
    freq_mask: True
    n_freq_mask: 2
    time_mask: True
    n_time_mask: 2
    replace_with_zero: False
    freq_mask_width: 30
    time_mask_width: 20

speed_perturb: !new:speechbrain.processing.speech_augmentation.SpeedPerturb
    orig_freq: !ref <sample_rate>
    speeds: [95, 100, 105]

frontend: !new:speechbrain.lobes.models.convolution.ConvolutionFrontEnd
    input_shape: [null, null, !ref <n_mels>]
    num_blocks: 2
    num_layers_per_block: 1
    out_channels: (128, 128)
    kernel_sizes: (3, 3)
    strides: (2, 2)
    residuals: (True, True)
    padding: !ref <padding>

encoder: !new:models.conformer.ConformerEncoder
    input_size: 2560
    d_model: !ref <d_model>
    nhead: !ref <nhead>
    num_layers: !ref <encoder_num_layers>
    d_ffn: !ref <d_ffn>
    dropout: !ref <dropout>
    activation: !name:torch.nn.LeakyReLU
    positional_encoding: fixed_abs_sine
    normalize_before: True
    attention_type: RelPosMHAXL
    causal: !ref <causal>
    injection_mode: !ref <injection_mode>
    injection_after: !ref <injection_after>

encoder_proj: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <joint_dim>

embedding: !new:speechbrain.nnet.embedding.Embedding
    num_embeddings: !ref <vocab_size>
    #embedding_dim: !ref <embedding_dim>
    consider_as_one_hot: True
    blank_id: !ref <blank_index>

decoder: !new:speechbrain.nnet.RNN.LSTM
    input_shape: [null, null, !ref <vocab_size> - 1]
    hidden_size: !ref <decoder_neurons>
    num_layers: !ref <decoder_num_layers>

decoder_proj: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <decoder_neurons>
    n_neurons: !ref <joint_dim>

joiner: !new:speechbrain.nnet.transducer.transducer_joint.Transducer_joint
    joint: sum
    nonlinearity: !name:torch.nn.LeakyReLU

transducer_head: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <joint_dim>
    n_neurons: !ref <vocab_size>

speaker_encoder: !new:models.conformer.ConformerEncoder
    input_size: 2560
    d_model: !ref <d_model>
    nhead: !ref <nhead>
    num_layers: 6
    d_ffn: !ref <d_ffn>
    dropout: !ref <dropout>
    activation: !name:torch.nn.LeakyReLU
    positional_encoding: fixed_abs_sine
    normalize_before: True
    attention_type: RelPosMHAXL
    causal: !ref <causal>

speaker_proj: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <d_model>

modules:
    feature_extractor: !ref <feature_extractor>
    normalizer: !ref <normalizer>
    augmentation: !ref <augmentation>
    speed_perturb: !ref <speed_perturb>
    frontend: !ref <frontend>
    encoder: !ref <encoder>
    encoder_proj: !ref <encoder_proj>
    embedding: !ref <embedding>
    decoder: !ref <decoder>
    decoder_proj: !ref <decoder_proj>
    joiner: !ref <joiner>
    transducer_head: !ref <transducer_head>
    speaker_encoder: !ref <speaker_encoder>
    speaker_proj: !ref <speaker_proj>

model: !new:torch.nn.ModuleList
    [[!ref <feature_extractor>, !ref <normalizer>,
      !ref <frontend>, !ref <encoder>, !ref <encoder_proj>,
      !ref <embedding>, !ref <decoder>, !ref <decoder_proj>,
      !ref <joiner>, !ref <transducer_head>,
      !ref <speaker_encoder>, !ref <speaker_proj>]]

# Loss functions
transducer_loss: !name:speechbrain.nnet.losses.transducer_loss
    use_torchaudio: True
    blank_index: !ref <blank_index>

# Optimizers
opt_class: !name:torch.optim.AdamW
    lr: !ref <lr>
    betas: (0.9, 0.98)
    eps: 1.e-8
    weight_decay: !ref <weight_decay>

noam_scheduler: !new:speechbrain.nnet.schedulers.NoamScheduler
    lr_initial: !ref <lr>
    n_warmup_steps: !ref <warmup_steps>

# Searchers
greedy_searcher: !new:speechbrain.decoders.transducer.TransducerBeamSearcher
    decode_network_lst: [!ref <embedding>, !ref <decoder>, !ref <decoder_proj>]
    tjoint: !ref <joiner>
    classifier_network: [!ref <transducer_head>]
    blank_id: !ref <blank_index>
    beam_size: 1
    nbest: 1

beam_searcher: !new:speechbrain.decoders.transducer.TransducerBeamSearcher
    decode_network_lst: [!ref <embedding>, !ref <decoder>, !ref <decoder_proj>]
    tjoint: !ref <joiner>
    classifier_network: [!ref <transducer_head>]
    blank_id: !ref <blank_index>
    beam_size: !ref <beam_size>
    nbest: 1
    state_beam: !ref <state_beam>
    expand_beam: !ref <expand_beam>

# Performance metrics
cer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
    split_tokens: True

wer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats

# Counters, checkpointers, loggers, etc.
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <num_epochs>

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        scheduler: !ref <noam_scheduler>
        counter: !ref <epoch_counter>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <output_folder>/train_log.txt

# Pretrainer
pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
    collect_in: !ref <save_folder>
    loadables:
        model: !ref <model>
    paths:
        model: !ref <model_path>
    conditions:
        model: !ref <model_path>
